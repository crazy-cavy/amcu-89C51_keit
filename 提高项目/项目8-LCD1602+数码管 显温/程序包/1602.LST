C51 COMPILER V9.55   1602                                                                  10/31/2016 20:05:08 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE 1602
OBJECT MODULE PLACED IN 1602.OBJ
COMPILER INVOKED BY: H:\code\Microcomputer\software\keil5-MDK\C51\BIN\C51.EXE 1602.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJE
                    -CTEXTEND TABS(2)

line level    source

   1          /*
   2          
   3          ³ÌÐòÃèÊö£ºM1602µÄ¿ØÖÆÐ¾Æ¬ÎªHD44780
   4          PORT 2.0,2.1,2.2ÔòÁ¬½Óµ½LCDÏÔÊ¾Æ÷µÄ¿ØÖÆÏß,
   5          P0¿Ú³ÌÐòÖ´ÐÐÊ±½«ÏÔÊ¾ºÓÄÏ¿Æ¼¼Ñ§ÔºÏà¹ØÐÅÏ¢*/
   6          /*******************************************************/
   7          #include <REG51.H>
   8          #include"18B20.c" 
   9          #define uchar unsigned char 
  10          #define uint unsigned int
  11            
  12          sbit RS = P1^6;
  13          sbit RW = P1^5;
  14          sbit E  = P1^4;
  15          
  16           
  17          code char num[]="0123456789";
  18          code  uchar seven_seg[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  19          code uchar seven_bit[] = {0x20,0x10,0x08,0x04,0x02,0x01};
  20          uchar cp;
  21          uint temp1,temp2;
  22          sbit led = P0^6;    
  23          void timer0_init(void)   //³õÊ¼»¯
  24          {
  25   1        TMOD = 0x01;
  26   1        TH0 = 0xec;
  27   1        TL0 = 0x78;
  28   1        TR0 = 1;
  29   1        EA  = 1;
  30   1        ET0 = 1;
  31   1      }
  32          /*****************************************************************************/
  33          void timer0_isr(void) interrupt 1     //ÖÐ¶Ï
  34          {
  35   1        uchar j;
  36   1        TR0 = 0;
  37   1        EA = 0;
  38   1        TH0 = 0xec;
  39   1        TL0 = 0x78;
  40   1        TR0 = 1;
  41   1        EA = 1;
  42   1        cp++;
  43   1        if(cp >= 200)   //¸ÕºÃ1Ãë
  44   1         {
  45   2          cp = 0;
  46   2          temp1 = Read_Temperature();//µÃµ½ÎÂ¶È
  47   2          if((temp1 & 0x80) == 0x80) //Èç¹ûÎÂ¶ÈÎª¸ºÖµ
  48   2          { 
  49   3          
  50   3            temp2 =0x7f & ~temp1  +  (0x0f & ~c) /15;  //ÕûÊý´¦Àí,ÐèÒª¼ÓÉÏÐ¡ÊýÀ´µÄ½èÎ»
  51   3            c = 0x0f & ~c + 0x01;   //Ð¡Êý´¦Àí
  52   3          }
  53   2          else temp2 = temp1;//Èç¹ûÎÂ¶ÈÎªÕýÖµ£¬²»ÓÃ´¦Àí
  54   2        }
C51 COMPILER V9.55   1602                                                                  10/31/2016 20:05:08 PAGE 2   

  55   1        P0 = seven_bit[j];
  56   1        switch(j)
  57   1        {
  58   2          case 0:P0 |= 0x80;P2 = seven_seg[c * 10/16];P0 &= 0x7f;break;//ÏÔÊ¾Ð¡Êý
  59   2          case 1:P0 |= 0x80;P2 = 0x80 | seven_seg[temp2 % 10];P0 &= 0x7f;break;//ÏÔÊ¾¸öÎ»²¢¼ÓÉÏÐ¡Êýµã
  60   2          case 2:{  
  61   3                    if((temp2 < 10) && (temp1 < 0x80))//Èç¹ûÎÂ¶ÈÐ¡ÓÚ10¶È£¬ÇÒÎªÕýÖµ£¬Ê®Î»0²»ÏÔÊ¾
  62   3                    {
  63   4                      P0 |= 0x80;       //´ò¿ªËø´æÆ÷
  64   4                      P2  = 0x00;
  65   4                      P0 &= 0x7f;       //¹Ø±ÕËø´æÆ÷
  66   4                      break;
  67   4                    }
  68   3                    if((temp1 > 0x80) && (temp2 < 10)){P0 |= 0x80;P2 = 0x40;P0 &= 0x7f;break;}//Èç¹ûÎÂ¶ÈÐ¡ÓÚ10¶È£¬ÇÒÎª¸
             -ºÖµ£¬Ê®Î»0²»ÏÔÊ¾£¬Ö»ÏÔÊ¾¡°-¡±
  69   3                      P0 |= 0x80; P2 = seven_seg[temp2 / 10]; P0 &= 0x7f;break;//Èç¹ûÎÂ¶È´óÓÚ10¶È£¬10Î»Õý³£ÏÔÊ¾       
  70   3                  }
  71   2          case 3:{
  72   3                if((temp1 > 0x80) && ((temp2 / 10) > 0))//Èç¹ûÎÂ¶ÈÎª¸ºÖµ£¬ÇÒÊ®Î»²»Îª0£¬°ÙÎ»ÏÔÊ¾¡°-¡±
  73   3                P0 |= 0x80;P2 = 0x40;P0 &= 0x7f;
  74   3                break;
  75   3              }
  76   2        }
  77   1        j++;
  78   1        if(j >= 3)
  79   1        j=0;
  80   1      }
  81          void write_command(uchar command)
  82          {
  83   1        RW = 0;
  84   1        RS = 0;
  85   1        E = 1;
  86   1        P2 = command;
  87   1        delay(20);
  88   1        E = 0;
  89   1        RW = 1;
  90   1      }
  91          void write_data(uchar date)
  92          {
  93   1        RW = 0;
  94   1        RS = 1;
  95   1        E = 1;
  96   1        P2 = date;
  97   1        delay(20);
  98   1        E = 0;
  99   1        RW = 1;
 100   1      }
 101          
 102          void display_string(uchar *p)
 103          {
 104   1        while(*p)
 105   1        {
 106   2          write_data(*p);
 107   2          p++;
 108   2        }
 109   1      }
 110          void gotoxy(unsigned y,unsigned x)
 111          {
 112   1        if(y == 1)  
 113   1          write_command(0x80+x);
 114   1        else if(y == 2) 
 115   1            write_command(0x80+0x40+x);
C51 COMPILER V9.55   1602                                                                  10/31/2016 20:05:08 PAGE 3   

 116   1      }
 117           void F1602_init(void)
 118          {
 119   1        write_command(0x38);  // Á½ÐÐ£¬Ã¿ÐÐ16×Ö·û£¬Ã¿¸ö×Ö·û5*7µãÕó  
 120   1        write_command(0x0C);    // CURSOR_OFF
 121   1        write_command(0x06C); // CURSOR_RIGHT
 122   1      }
 123          void F1602_clear()
 124          {
 125   1        write_command(0x01);  
 126   1        write_command(0x02);  
 127   1      } 
 128          void main (void)  
 129          {
 130   1          F1602_init();
 131   1          F1602_clear();
 132   1          timer0_init();
 133   1          while(1)
 134   1          {   
 135   2            ET0=0;
 136   2            F1602_clear();
 137   2            gotoxy(1,1);
 138   2            display_string("AMCU HARDWARE");  
 139   2            gotoxy(2,0);
 140   2            display_string("DEVELOPMENT TEAM");
 141   2            ET0=1;
 142   2            delay(3000);
 143   2            ET0=0;
 144   2            F1602_clear();
 145   2            gotoxy(1,3);
 146   2            display_string("AMCU 89C51");
 147   2            gotoxy(2,2);
 148   2            display_string("STARTER  KIT");
 149   2            ET0=1;
 150   2            delay(3000);
 151   2          }          
 152   1      }
 153          
*** WARNING C316 IN LINE 153 OF 1602.C: unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    820    ----
   CONSTANT SIZE    =     82    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
